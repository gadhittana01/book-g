// Code generated by MockGen. DO NOT EDIT.
// Source: ./service/user_service.go

// Package mocksvc is a generated GoMock package.
package mocksvc

import (
	context "context"
	reflect "reflect"

	dto "github.com/gadhittana-01/book-go/dto"
	gomock "github.com/golang/mock/gomock"
)

// MockUserSvc is a mock of UserSvc interface.
type MockUserSvc struct {
	ctrl     *gomock.Controller
	recorder *MockUserSvcMockRecorder
}

// MockUserSvcMockRecorder is the mock recorder for MockUserSvc.
type MockUserSvcMockRecorder struct {
	mock *MockUserSvc
}

// NewMockUserSvc creates a new mock instance.
func NewMockUserSvc(ctrl *gomock.Controller) *MockUserSvc {
	mock := &MockUserSvc{ctrl: ctrl}
	mock.recorder = &MockUserSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserSvc) EXPECT() *MockUserSvcMockRecorder {
	return m.recorder
}

// SignIn mocks base method.
func (m *MockUserSvc) SignIn(ctx context.Context, input dto.SignInReq) dto.SignInRes {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", ctx, input)
	ret0, _ := ret[0].(dto.SignInRes)
	return ret0
}

// SignIn indicates an expected call of SignIn.
func (mr *MockUserSvcMockRecorder) SignIn(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockUserSvc)(nil).SignIn), ctx, input)
}

// SignUp mocks base method.
func (m *MockUserSvc) SignUp(ctx context.Context, input dto.SignUpReq) dto.SignUpRes {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", ctx, input)
	ret0, _ := ret[0].(dto.SignUpRes)
	return ret0
}

// SignUp indicates an expected call of SignUp.
func (mr *MockUserSvcMockRecorder) SignUp(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockUserSvc)(nil).SignUp), ctx, input)
}
