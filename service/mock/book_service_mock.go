// Code generated by MockGen. DO NOT EDIT.
// Source: ./service/book_service.go

// Package mocksvc is a generated GoMock package.
package mocksvc

import (
	context "context"
	reflect "reflect"

	dto "github.com/gadhittana-01/book-go/dto"
	service "github.com/gadhittana-01/book-go/service"
	gomock "github.com/golang/mock/gomock"
)

// MockBookSvc is a mock of BookSvc interface.
type MockBookSvc struct {
	ctrl     *gomock.Controller
	recorder *MockBookSvcMockRecorder
}

// MockBookSvcMockRecorder is the mock recorder for MockBookSvc.
type MockBookSvcMockRecorder struct {
	mock *MockBookSvc
}

// NewMockBookSvc creates a new mock instance.
func NewMockBookSvc(ctrl *gomock.Controller) *MockBookSvc {
	mock := &MockBookSvc{ctrl: ctrl}
	mock.recorder = &MockBookSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookSvc) EXPECT() *MockBookSvcMockRecorder {
	return m.recorder
}

// CreateBook mocks base method.
func (m *MockBookSvc) CreateBook(ctx context.Context, input dto.CreateBookReq) dto.CreateBookRes {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBook", ctx, input)
	ret0, _ := ret[0].(dto.CreateBookRes)
	return ret0
}

// CreateBook indicates an expected call of CreateBook.
func (mr *MockBookSvcMockRecorder) CreateBook(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockBookSvc)(nil).CreateBook), ctx, input)
}

// GetBook mocks base method.
func (m *MockBookSvc) GetBook(ctx context.Context, input dto.GetBookReq) service.PaginationBookResp {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBook", ctx, input)
	ret0, _ := ret[0].(service.PaginationBookResp)
	return ret0
}

// GetBook indicates an expected call of GetBook.
func (mr *MockBookSvcMockRecorder) GetBook(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBook", reflect.TypeOf((*MockBookSvc)(nil).GetBook), ctx, input)
}

// GetBookPuchasedByUser mocks base method.
func (m *MockBookSvc) GetBookPuchasedByUser(ctx context.Context) []dto.GetBookPuchasedByUserRes {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookPuchasedByUser", ctx)
	ret0, _ := ret[0].([]dto.GetBookPuchasedByUserRes)
	return ret0
}

// GetBookPuchasedByUser indicates an expected call of GetBookPuchasedByUser.
func (mr *MockBookSvcMockRecorder) GetBookPuchasedByUser(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookPuchasedByUser", reflect.TypeOf((*MockBookSvc)(nil).GetBookPuchasedByUser), ctx)
}
