// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/gadhittana-01/book-go/app"
	"github.com/gadhittana-01/book-go/db/repository"
	"github.com/gadhittana-01/book-go/handler"
	"github.com/gadhittana-01/book-go/service"
	"github.com/gadhittana-01/book-go/utils"
	"github.com/go-chi/chi"
	"github.com/google/wire"
	"github.com/redis/go-redis/v9"
)

// Injectors from injector.go:

func InitializeApp(route *chi.Mux, DB utils.PGXPool, config *utils.BaseConfig) (app.App, error) {
	repository := querier.NewRepository(DB)
	tokenClient := utils.NewToken(config)
	userSvc := service.NewUserSvc(repository, config, tokenClient)
	userHandler := handler.NewUserHandler(userSvc)
	client := utils.NewRedisClient(config)
	cacheSvc := utils.NewCacheSvc(config, client)
	orderSvc := service.NewOrderSvc(repository, config, cacheSvc)
	authMiddleware := utils.NewAuthMiddleware(config, tokenClient)
	orderHandler := handler.NewOrderHandler(orderSvc, authMiddleware)
	bookSvc := service.NewBookSvc(repository, config, cacheSvc)
	bookHandler := handler.NewBookHandler(bookSvc, authMiddleware)
	appApp := app.NewApp(route, config, userHandler, orderHandler, bookHandler)
	return appApp, nil
}

// injector.go:

var userHandlerSet = wire.NewSet(querier.NewRepository, utils.NewToken, handler.NewUserHandler, service.NewUserSvc)

var orderHandlerSet = wire.NewSet(handler.NewOrderHandler, service.NewOrderSvc)

var bookHandlerSet = wire.NewSet(handler.NewBookHandler, service.NewBookSvc)

var authMiddlewareSet = wire.NewSet(utils.NewAuthMiddleware)

var cacheSet = wire.NewSet(wire.Bind(new(utils.RedisClient), new(*redis.Client)), utils.NewRedisClient, utils.NewCacheSvc)
