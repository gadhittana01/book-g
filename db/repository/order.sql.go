// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: order.sql

package querier

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const checkOrderExists = `-- name: CheckOrderExists :one
SELECT EXISTS(SELECT id FROM "order" WHERE id=$1)
`

func (q *Queries) CheckOrderExists(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRow(ctx, checkOrderExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createOrder = `-- name: CreateOrder :one
INSERT INTO "order"(user_id, date) VALUES
($1, $2) RETURNING id, user_id, date, created_at, updated_at
`

type CreateOrderParams struct {
	UserID uuid.UUID `json:"user_id"`
	Date   time.Time `json:"date"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder, arg.UserID, arg.Date)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Date,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createOrderDetail = `-- name: CreateOrderDetail :one
INSERT INTO "order_detail"(order_id, book_id, quantity) VALUES
($1, $2, $3) RETURNING id, order_id, book_id, quantity, created_at, updated_at
`

type CreateOrderDetailParams struct {
	OrderID  uuid.UUID `json:"order_id"`
	BookID   uuid.UUID `json:"book_id"`
	Quantity int32     `json:"quantity"`
}

func (q *Queries) CreateOrderDetail(ctx context.Context, arg CreateOrderDetailParams) (OrderDetail, error) {
	row := q.db.QueryRow(ctx, createOrderDetail, arg.OrderID, arg.BookID, arg.Quantity)
	var i OrderDetail
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.BookID,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findOrderByID = `-- name: FindOrderByID :one
SELECT id, user_id, date, created_at, updated_at FROM "order" AS o
WHERE o.user_id=$1 AND o.id=$2
`

type FindOrderByIDParams struct {
	UserID uuid.UUID `json:"user_id"`
	ID     uuid.UUID `json:"id"`
}

func (q *Queries) FindOrderByID(ctx context.Context, arg FindOrderByIDParams) (Order, error) {
	row := q.db.QueryRow(ctx, findOrderByID, arg.UserID, arg.ID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Date,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findOrderByUserID = `-- name: FindOrderByUserID :many
SELECT id, user_id, date, created_at, updated_at FROM "order" AS o
WHERE o.user_id=$1
ORDER BY o.date DESC
LIMIT $2 OFFSET $3
`

type FindOrderByUserIDParams struct {
	UserID uuid.UUID `json:"user_id"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) FindOrderByUserID(ctx context.Context, arg FindOrderByUserIDParams) ([]Order, error) {
	rows, err := q.db.Query(ctx, findOrderByUserID, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Date,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findOrderDetailByOrderID = `-- name: FindOrderDetailByOrderID :many
SELECT 
    o.id, o.date, od.book_id, b.title,
    b.description, b.author, od.quantity
FROM "order" AS o
JOIN "order_detail" od 
ON o.id = od.order_id JOIN "book" AS b
ON od.book_id = b.id
WHERE o.user_id=$1 AND o.id=$2
`

type FindOrderDetailByOrderIDParams struct {
	UserID uuid.UUID `json:"user_id"`
	ID     uuid.UUID `json:"id"`
}

type FindOrderDetailByOrderIDRow struct {
	ID          uuid.UUID `json:"id"`
	Date        time.Time `json:"date"`
	BookID      uuid.UUID `json:"book_id"`
	Title       string    `json:"title"`
	Description string    `json:"description"`
	Author      string    `json:"author"`
	Quantity    int32     `json:"quantity"`
}

func (q *Queries) FindOrderDetailByOrderID(ctx context.Context, arg FindOrderDetailByOrderIDParams) ([]FindOrderDetailByOrderIDRow, error) {
	rows, err := q.db.Query(ctx, findOrderDetailByOrderID, arg.UserID, arg.ID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FindOrderDetailByOrderIDRow{}
	for rows.Next() {
		var i FindOrderDetailByOrderIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Date,
			&i.BookID,
			&i.Title,
			&i.Description,
			&i.Author,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderCountByUserId = `-- name: GetOrderCountByUserId :one
SELECT COUNT(o.*) FROM (SELECT id, user_id, date, created_at, updated_at FROM "order" AS o
WHERE o.user_id=$1) AS o
`

func (q *Queries) GetOrderCountByUserId(ctx context.Context, userID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, getOrderCountByUserId, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}
